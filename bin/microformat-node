#!/usr/bin/env node

var app         = require('http').createServer(handler),
    fs          = require('fs'),
    parser      = require('../lib/parser.js'),
    utils       = require('../lib/utilities.js'),
    testWriter  = require('../test/testWriter.js');

//parser.setParserOptions({logLevel: 4})    


function handler(req, res) {

  // get the query object
  var query = require('url').parse(req.url, true).query;


  // if the root is requested then demo form.
  if (req.url === '/') {
    writeHTML('/../static/index.html');

  }else if (req.url.indexOf('/test/update/') > -1 && !query.url) {
    testWriter.updateTests();
    res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'});
    res.end('<h1>Updating tests how...</h1>');

  }else if (req.url.indexOf('/test/') > -1 && !query.url) {
    var parts = req.url.split('/test/');
    writeHTML('/../static/' + parts[1]);

  }else if (req.url.indexOf('/javascript/') > -1 && !query.url) {
    writeJS(req.url);

  }else if (req.url.indexOf('/css/') > -1 && !query.url) {
    writeCSS(req.url);

  }else if (req.url.indexOf('/iamges/') > -1 && !query.url) {
    writeImages(req.url);


  // return json uf  
  }else{

    // set for direct url entry
    var options = {
      'baseurl': '',
      'useCache': false,
      'version1': true,
      'children': true,
      'childrenRel':  true,
      'rel': true,
      'includes': true,
      'filters': [],
      'textFormat': 'normalised'
    };

    // set for form entry - radio button not giving a =false
    if(query.testform){
      options.useCache = false;
      options.version1 = false;
      options.children = false;
      options.childrenRel = false;
      options.rel = false;
    }
 
    if(query.baseurl){
      options.baseUrl = query.baseurl;
    }

    if(query.filters){
      // break into an array
      var out   =[],
          list  = query.filters;

      if(list && list !== '') {
        list = utils.trim( utils.removeWhiteSpace(list) );
        if(list.indexOf(' ') > -1) {
          out = list.split(' ');
        } else {
          out.push(list);
        }
      }
      options.filters = out;
    }


    if(query.usecache){
      options.useCache = (query.usecache === 'true')? true : false;
    }

    if(query.version1){
      options.version1 = (query.version1 === 'true')? true : false;
    }

    if(query.children){
      options.children = (query.children === 'true')? true : false;
    }

    if(query.childrenrel){
      options.childrenRel = (query.childrenrel === 'true')? true : false;
    }

    if(query.rel){
      options.rel = (query.rel === 'true')? true : false;
    }

    if(query.includes){
      options.includes = (query.includes === 'true')? true : false;
    }

    if(query.textformat){
      options.textFormat = query.textformat;
    }


    if(query.url){

      parser.parseUrl(query.url, options, function(errors, data){
        res.writeHead(200, {'Content-Type': 'application/json; charset=utf-8'});
        if(errors){
            data = {}
            data.errors = errors; 
        }
        if (query.callback) {
          res.end(query.callback + '(' + JSON.stringify(data) + ')');
        } else {
          res.end(JSON.stringify(data));
        }
      });
    }

    if(query.html){

      parser.parseHtml(query.html, options, function(errors, data){
        res.writeHead(200, {'Content-Type': 'application/json; charset=utf-8'});
        if(errors){
            data = {}
            data.errors = errors; 
        }
        if (query.callback) {
          res.end(query.callback + '(' + JSON.stringify(data) + ')');
        } else {
          res.end(JSON.stringify(data));
        }
      });
    }

  }



  function writeHTML(path){
    res.writeHead(200, {'Content-Type': 'text/html'});
    fs.readFile(__dirname + path, function (err, page) {
      if(err) {
        console.log(err)
      }else{
        res.end(page);
      }
    });
    return;
  };


  function writeStaticHTML(path){
    path = '/../static/' + path;
    res.writeHead(200, {'Content-Type': 'text/html'});
    fs.readFile(__dirname + path, function (err, page) {
      if(err) {
        console.log(err)
      }else{
        res.end(page);
      }
    });
    return;
  };


  function writeJS(path){
    var parts = path.split('/javascript/');
    path = '/../static/javascript/' + parts[1];
    res.writeHead(200, {'Content-Type': 'text/javascript'});
    fs.readFile(__dirname + path, function (err, page) {
      if(err) {
        console.log(err)
      }else{
        res.end(page);
      }
    });
    return;
  };

  function writeCSS(path){
    var parts = path.split('/css/');
    path = '/../static/css/' + parts[1];
    res.writeHead(200, {'Content-Type': 'text/css'});
    fs.readFile(__dirname + path, function (err, page) {
      if(err) {
        console.log(err)
      }else{
        res.end(page);
      }
    });
    return;
  };


  function writeImages(path){
    var parts = path.split('/images/');
    path = '/../static/images/' + parts[1];
    res.writeHead(200, {'Content-Type': 'image/gif'});
    fs.readFile(__dirname + path, function (err, page) {
      if(err) {
        console.log(err)
      }else{
        res.end(page);
      }
    });
    return;
  };



}

app.listen(8888, 'localhost');
console.log('App @ http://localhost:8888');