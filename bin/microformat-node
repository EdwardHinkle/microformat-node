#!/usr/bin/env node

var app      = require('http').createServer(handler),
    fs       = require('fs'),
    parser  = require('../lib/parser.js')
    testWriter  = require('../lib/helper-testWriter.js');

//parser.setParserOptions({logLevel: 4})    


function handler(req, res) {

  // get the query object
  var query = require('url').parse(req.url, true).query;


  // if the root is requested then demo form.
  if (req.url === '/') {
    writeHTML('/../static/index.html');

/*  }else if (req.url.indexOf('/unittests/auto/') > -1 && !query.url) {
    writeHTML('/../static/unittests-auto.html');  

  }else if (req.url.indexOf('/unittests/') > -1 && !query.url) {
    writeHTML('/../static/unittests.html');*/

  }else if (req.url.indexOf('/test/update/') > -1 && !query.url) {
    testWriter.updateTests();
    res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'});
    res.end('<h1>Updating text how</h1>');

  }else if (req.url.indexOf('/test/h-card/') > -1 && !query.url) {
    writeHTML('/../static/h-card.html');

  }else if (req.url.indexOf('test/h-event/') > -1 && !query.url) {
    writeHTML('/../static/h-event.html');

  }else if (req.url.indexOf('test/h-entry/') > -1 && !query.url) {
    writeHTML('/../static/h-entry.html');

  }else if (req.url.indexOf('/javascript/') > -1 && !query.url) {
    writeJS(req.url);

  }else if (req.url.indexOf('/css/') > -1 && !query.url) {
    writeCSS(req.url);

/*  // return plain text
  }else if (req.url.indexOf('/api/text') > -1) {
      if(query.cssquery){
        options.cssquery = query.cssquery;
      }
      parser.parsePlainText(query.url, options, function(err, data){
        res.writeHead(200, {'Content-Type': 'text/plain; charset=utf-8'});
          res.end(data);
      });

  // return html
  }else if (req.url.indexOf('/api/html') > -1) {
      if(query.cssquery){
        options.cssquery = query.cssquery;
      }
      parser.parseInnerHTML(query.url, options, function(err, data){
        res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'});
          res.end(data);
      });*/

  // return json uf  
  }else{
    
    if(query.url){

      var options = {};
      if(query.formats){
        options.formats = query.formats;
      }

      if(query.formats){
        options.formats = query.formats;
      }

      parser.parseUrl(query.url, options, function(err, ufData){
        res.writeHead(200, {'Content-Type': 'application/json; charset=utf-8'});

        if (query.callback) {
          res.end(query.callback + '(' + JSON.stringify(ufData) + ')');
        } else {
          res.end(JSON.stringify(ufData));
        }
      });

    }

  }


  function writeHTML(path){
    res.writeHead(200, {'Content-Type': 'text/html'});
    fs.readFile(__dirname + path, function (err, page) {
      if (err) throw err;
      res.end(page);
    });
    return;
  };


  function writeJS(path){
    var parts = path.split('/javascript/');
    path = '/../static/javascript/' + parts[1];
    res.writeHead(200, {'Content-Type': 'text/javascript'});
    fs.readFile(__dirname + path, function (err, page) {
      if (err) throw err;
      res.end(page);
    });
    return;
  };

  function writeCSS(path){
    var parts = path.split('/css/');
    path = '/../static/css/' + parts[1];
    res.writeHead(200, {'Content-Type': 'text/css'});
    fs.readFile(__dirname + path, function (err, page) {
      if (err) throw err;
      res.end(page);
    });
    return;
  };



}

app.listen(8888, 'localhost');
console.log('App @ http://localhost:8888');